{"ast":null,"code":"export const getDatesInRange = (startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n  while (start < end) {\n    dates.push(new Date(start).toISOString().split(\"T\")[0]); // 'YYYY-MM-DD'\n    start.setDate(start.getDate() + 1);\n  }\n\n  // Add the end date only if it is different from the start date\n  if (startDate !== endDate) {\n    dates.push(endDate);\n  }\n  return dates;\n};\nexport const hourHeight = 48; // For example, each hour block is 48px tall\n\n// Util function to get day name abbreviation\nexport const getDayNameAbbreviation = date => {\n  return date.toLocaleDateString(\"en-US\", {\n    weekday: \"short\"\n  }).toUpperCase();\n};\nexport const to24HourTime = time => {\n  // Validate time format (optional)\n  if (!/^\\d{2}:\\d{2}$/.test(time)) {\n    console.error(`Invalid time format: \"${time}\"`);\n    return \"00:00\"; // Return a default value for invalid format\n  }\n  return time; // Return the time as it is in 24-hour format\n};\n\n// Function to get the current week's dates\nexport const getWeekDates = date => {\n  const weekStart = new Date(date);\n  weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n  return Array.from({\n    length: 7\n  }, (_, i) => {\n    const weekDate = new Date(weekStart);\n    weekDate.setDate(weekStart.getDate() + i);\n    return {\n      dayOfWeek: getDayNameAbbreviation(weekDate),\n      fullDate: weekDate.toISOString().split(\"T\")[0],\n      // 'YYYY-MM-DD'\n      date: weekDate.getDate()\n    };\n  });\n};\n\n// Process events to be keyed by fullDate and startTime for easy access\nexport const eventsByDateAndTime = {};\nexport const times = Array.from({\n  length: 24\n}, (_, index) => `${index}:00 `);\nexport const getHourIndex = time => {\n  const [hour] = time.split(\":\").map(Number);\n  return hour; // returns 0 for 12:00 AM, 1 for 1:00 AM, etc.\n};\nexport const daysDifference = (startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  return (end.getTime() - start.getTime()) / (1000 * 3600 * 24);\n};\nexport const calculateTop = event => {\n  if (event.isFullDay) {\n    return 0; // Full-day events start at the top\n  }\n  // Non full-day events calculate the top based on the start time\n  const time = event.startTime || \"00:00\";\n  return calculateTimePosition(time);\n};\nexport const calculateTimePosition = time => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n  return (hours * 60 + minutes) * (hourHeight / 60);\n};\nexport const calculateDurationHeight = (start, end) => {\n  const [startHours, startMinutes] = start.split(\":\").map(Number);\n  const [endHours, endMinutes] = end.split(\":\").map(Number);\n  return ((endHours - startHours) * 60 + (endMinutes - startMinutes)) * (hourHeight / 60);\n};\nexport const calculateHeight = event => {\n  if (event.isFullDay) {\n    return hourHeight; // Full-day event height\n  }\n  // For non full-day events, calculate the height based on the time duration\n  const start = event.startTime || \"00:00\";\n  const end = event.endTime || \"23:59\";\n  return calculateDurationHeight(start, end);\n};\nexport const calculateWidthAndLeft = (event, dayIndex) => {\n  if (event.isFullDay) {\n    return [100, 0];\n  }\n  let width = 100;\n  let left = 0;\n  const daySpan = event.endDate ? daysDifference(event.startDate, event.endDate) : 0;\n  if (daySpan > 0) {\n    width = 100 / (daySpan + 1); // Divide the width by the number of days\n    left = width * dayIndex; // Position based on the day index\n  }\n  return [width, left];\n};","map":{"version":3,"names":["getDatesInRange","startDate","endDate","start","Date","end","dates","push","toISOString","split","setDate","getDate","hourHeight","getDayNameAbbreviation","date","toLocaleDateString","weekday","toUpperCase","to24HourTime","time","test","console","error","getWeekDates","weekStart","getDay","Array","from","length","_","i","weekDate","dayOfWeek","fullDate","eventsByDateAndTime","times","index","getHourIndex","hour","map","Number","daysDifference","getTime","calculateTop","event","isFullDay","startTime","calculateTimePosition","hours","minutes","calculateDurationHeight","startHours","startMinutes","endHours","endMinutes","calculateHeight","endTime","calculateWidthAndLeft","dayIndex","width","left","daySpan"],"sources":["/Users/mustafizur/Codes/tvs/calendar-event-backend/frontend/src/components/common/common.tsx"],"sourcesContent":["export interface Event {\n  _id: string; // Using _id instead of id as per Mongoose schema\n  title: string;\n  description?: string;\n  startDate: string; // ISO date string, e.g., \"2023-12-25\"\n  endDate?: string; // ISO date string, e.g., \"2023-12-25\"\n  startTime?: string; // Optional start time as a string, e.g., \"10:00\"\n  endTime?: string; // Optional end time as a string, e.g., \"11:00\"\n  isFullDay: boolean;\n  repeat?: \"none\" | \"daily\" | \"weekly\" | \"monthly\" | \"yearly\";\n  repeatCycle?: number;\n}\n\nexport const getDatesInRange = (\n  startDate: string,\n  endDate: string\n): string[] => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n\n  while (start < end) {\n    dates.push(new Date(start).toISOString().split(\"T\")[0]); // 'YYYY-MM-DD'\n    start.setDate(start.getDate() + 1);\n  }\n\n  // Add the end date only if it is different from the start date\n  if (startDate !== endDate) {\n    dates.push(endDate);\n  }\n\n  return dates;\n};\n\nexport const hourHeight = 48; // For example, each hour block is 48px tall\n\n// Util function to get day name abbreviation\nexport const getDayNameAbbreviation = (date: Date) => {\n  return date.toLocaleDateString(\"en-US\", { weekday: \"short\" }).toUpperCase();\n};\n\nexport const to24HourTime = (time: string): string => {\n  // Validate time format (optional)\n  if (!/^\\d{2}:\\d{2}$/.test(time)) {\n    console.error(`Invalid time format: \"${time}\"`);\n    return \"00:00\"; // Return a default value for invalid format\n  }\n\n  return time; // Return the time as it is in 24-hour format\n};\n\n// Function to get the current week's dates\nexport const getWeekDates = (date: Date) => {\n  const weekStart = new Date(date);\n  weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n  return Array.from({ length: 7 }, (_, i) => {\n    const weekDate = new Date(weekStart);\n    weekDate.setDate(weekStart.getDate() + i);\n    return {\n      dayOfWeek: getDayNameAbbreviation(weekDate),\n      fullDate: weekDate.toISOString().split(\"T\")[0], // 'YYYY-MM-DD'\n      date: weekDate.getDate(),\n    };\n  });\n};\n\n// Process events to be keyed by fullDate and startTime for easy access\nexport const eventsByDateAndTime: {\n  [fullDate: string]: { [startTime: string]: Event[] };\n} = {};\n\nexport const times = Array.from({ length: 24 }, (_, index) => `${index}:00 `);\n\nexport const getHourIndex = (time: string): number => {\n  const [hour] = time.split(\":\").map(Number);\n  return hour; // returns 0 for 12:00 AM, 1 for 1:00 AM, etc.\n};\n\nexport const daysDifference = (startDate: string, endDate: string): number => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  return (end.getTime() - start.getTime()) / (1000 * 3600 * 24);\n};\n\nexport const calculateTop = (event: Event): number => {\n  if (event.isFullDay) {\n    return 0; // Full-day events start at the top\n  }\n  // Non full-day events calculate the top based on the start time\n  const time = event.startTime || \"00:00\";\n  return calculateTimePosition(time);\n};\n\nexport const calculateTimePosition = (time: string): number => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n  return (hours * 60 + minutes) * (hourHeight / 60);\n};\n\nexport const calculateDurationHeight = (start: string, end: string): number => {\n  const [startHours, startMinutes] = start.split(\":\").map(Number);\n  const [endHours, endMinutes] = end.split(\":\").map(Number);\n  return (\n    ((endHours - startHours) * 60 + (endMinutes - startMinutes)) *\n    (hourHeight / 60)\n  );\n};\n\nexport const calculateHeight = (event: Event): number => {\n  if (event.isFullDay) {\n    return hourHeight; // Full-day event height\n  }\n  // For non full-day events, calculate the height based on the time duration\n  const start = event.startTime || \"00:00\";\n  const end = event.endTime || \"23:59\";\n  return calculateDurationHeight(start, end);\n};\n\nexport const calculateWidthAndLeft = (\n  event: Event,\n  dayIndex: number\n): [number, number] => {\n  if (event.isFullDay) {\n    return [100, 0];\n  }\n  let width = 100;\n  let left = 0;\n  const daySpan = event.endDate\n    ? daysDifference(event.startDate, event.endDate)\n    : 0;\n\n  if (daySpan > 0) {\n    width = 100 / (daySpan + 1); // Divide the width by the number of days\n    left = width * dayIndex; // Position based on the day index\n  }\n\n  return [width, left];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}